name: Очистка релизов и тегов

on:
  workflow_dispatch:
    inputs:
      clean_target:
        description: "Что очищать:"
        required: true
        type: choice
        default: 'releases'
        options:
          - 'releases'
          - 'prereleases'
          - 'tags'
          - 'all'
      clean_mode:
        description: "Режим очистки (amount--по количеству, date--по дате):"
        required: true
        type: choice
        default: 'amount'
        options:
          - 'amount'
          - 'date'
      clean_to_keep:
        description: "Количество для сохранения / дней назад:"
        required: true
        type: string
        default: "5"

jobs:
  clean-repository:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Проверка репозитория
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Установка GitHub CLI
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo apt update
          sudo apt install -y jq
          type -p gh >/dev/null || sudo apt install -y gh
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          gh --version

      - name: Очистка релизов по количеству
        if: ${{ (github.event.inputs.clean_target == 'releases' || github.event.inputs.clean_target == 'all') && github.event.inputs.clean_mode == 'amount' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_full_name=$GITHUB_REPOSITORY
          echo "Получение списка релизов..."
          
          # Получаем все релизы (исключая пре-релизы)
          all_releases=$(gh api -X GET "repos/$repo_full_name/releases?per_page=100" | 
            jq '[.[] | select(.prerelease == false)]')
          
          total_releases=$(echo "$all_releases" | jq length)
          keep_count=$(( ${{ github.event.inputs.clean_to_keep }} < total_releases ? ${{ github.event.inputs.clean_to_keep }} : total_releases ))
          
          echo "Найдено $total_releases релизов, сохраняем последние $keep_count"
          
          # Получаем ID релизов для удаления
          to_delete=$(echo "$all_releases" | 
            jq -r 'sort_by(.created_at) | reverse | .['$keep_count':] | .[].id')
          
          for release_id in $to_delete; do
            release_name=$(echo "$all_releases" | jq -r ".[] | select(.id == $release_id) | .tag_name")
            echo "Удаляем релиз: $release_name (ID: $release_id)"
            gh api -X DELETE "repos/$repo_full_name/releases/$release_id" --silent
          done

      - name: Очистка пре-релизов по количеству
        if: ${{ (github.event.inputs.clean_target == 'prereleases' || github.event.inputs.clean_target == 'all') && github.event.inputs.clean_mode == 'amount' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_full_name=$GITHUB_REPOSITORY
          echo "Получение списка пре-релизов..."
          
          # Получаем все пре-релизы
          all_prereleases=$(gh api -X GET "repos/$repo_full_name/releases?per_page=100" | 
            jq '[.[] | select(.prerelease == true)]')
          
          total_prereleases=$(echo "$all_prereleases" | jq length)
          keep_count=$(( ${{ github.event.inputs.clean_to_keep }} < total_prereleases ? ${{ github.event.inputs.clean_to_keep }} : total_prereleases ))
          
          echo "Найдено $total_prereleases пре-релизов, сохраняем последние $keep_count"
          
          # Получаем ID пре-релизов для удаления
          to_delete=$(echo "$all_prereleases" | 
            jq -r 'sort_by(.created_at) | reverse | .['$keep_count':] | .[].id')
          
          for release_id in $to_delete; do
            release_name=$(echo "$all_prereleases" | jq -r ".[] | select(.id == $release_id) | .tag_name")
            echo "Удаляем пре-релиз: $release_name (ID: $release_id)"
            gh api -X DELETE "repos/$repo_full_name/releases/$release_id" --silent
          done

      - name: Очистка тегов по количеству
        if: ${{ (github.event.inputs.clean_target == 'tags' || github.event.inputs.clean_target == 'all') && github.event.inputs.clean_mode == 'amount' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_full_name=$GITHUB_REPOSITORY
          echo "Получение списка тегов..."
          
          # Получаем все теги
          all_tags=$(gh api -X GET "repos/$repo_full_name/tags?per_page=100" | jq -r '.[].name')
          total_tags=$(echo "$all_tags" | wc -l)
          keep_count=$(( ${{ github.event.inputs.clean_to_keep }} < total_tags ? ${{ github.event.inputs.clean_to_keep }} : total_tags ))
          
          echo "Найдено $total_tags тегов, сохраняем последние $keep_count"
          
          # Получаем теги для удаления (пропускаем первые keep_count)
          to_delete_tags=$(echo "$all_tags" | tail -n +$((keep_count + 1)))
          
          for tag in $to_delete_tags; do
            if [ ! -z "$tag" ]; then
              echo "Удаляем тег: $tag"
              git push --delete origin "$tag" 2>/dev/null || echo "Не удалось удалить тег $tag"
            fi
          done

      - name: Очистка релизов по дате
        if: ${{ (github.event.inputs.clean_target == 'releases' || github.event.inputs.clean_target == 'all') && github.event.inputs.clean_mode == 'date' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_full_name=$GITHUB_REPOSITORY
          cutoff_date=$(date -d "${{ github.event.inputs.clean_to_keep }} days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Удаление релизов старше $cutoff_date..."
          
          # Получаем релизы старше указанной даты
          old_releases=$(gh api -X GET "repos/$repo_full_name/releases?per_page=100" | 
            jq -r --arg cutoff "$cutoff_date" '.[] | select(.prerelease == false and .created_at < $cutoff) | .id')
          
          for release_id in $old_releases; do
            release_info=$(gh api -X GET "repos/$repo_full_name/releases/$release_id")
            release_name=$(echo "$release_info" | jq -r '.tag_name')
            release_date=$(echo "$release_info" | jq -r '.created_at')
            echo "Удаляем релиз: $release_name (создан: $release_date)"
            gh api -X DELETE "repos/$repo_full_name/releases/$release_id" --silent
          done

      - name: Очистка пре-релизов по дате
        if: ${{ (github.event.inputs.clean_target == 'prereleases' || github.event.inputs.clean_target == 'all') && github.event.inputs.clean_mode == 'date' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_full_name=$GITHUB_REPOSITORY
          cutoff_date=$(date -d "${{ github.event.inputs.clean_to_keep }} days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Удаление пре-релизов старше $cutoff_date..."
          
          # Получаем пре-релизы старше указанной даты
          old_prereleases=$(gh api -X GET "repos/$repo_full_name/releases?per_page=100" | 
            jq -r --arg cutoff "$cutoff_date" '.[] | select(.prerelease == true and .created_at < $cutoff) | .id')
          
          for release_id in $old_prereleases; do
            release_info=$(gh api -X GET "repos/$repo_full_name/releases/$release_id")
            release_name=$(echo "$release_info" | jq -r '.tag_name')
            release_date=$(echo "$release_info" | jq -r '.created_at')
            echo "Удаляем пре-релиз: $release_name (создан: $release_date)"
            gh api -X DELETE "repos/$repo_full_name/releases/$release_id" --silent
          done

      - name: Очистка тегов по дате
        if: ${{ (github.event.inputs.clean_target == 'tags' || github.event.inputs.clean_target == 'all') && github.event.inputs.clean_mode == 'date' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_full_name=$GITHUB_REPOSITORY
          cutoff_date=$(date -d "${{ github.event.inputs.clean_to_keep }} days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Удаление тегов старше $cutoff_date..."
          
          # Получаем информацию о тегах с датами коммитов
          git for-each-ref --format="%(refname:short) %(committerdate:iso8601)" refs/tags | while read tag_name tag_date; do
            if [[ "$tag_date" < "$cutoff_date" ]]; then
              echo "Удаляем тег: $tag_name (дата коммита: $tag_date)"
              git push --delete origin "$tag_name" 2>/dev/null || echo "Не удалось удалить тег $tag_name"
            fi
          done

      - name: Сводка операций
        run: |
          echo "### Операция очистки завершена ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Цель очистки:** ${{ github.event.inputs.clean_target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Режим:** ${{ github.event.inputs.clean_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Параметр:** ${{ github.event.inputs.clean_to_keep }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Время выполнения:** $(date)" >> $GITHUB_STEP_SUMMARY
